name: Release and Documentation

on:
    push:
        branches:
            - main
        paths:
            - "**/Cargo.toml"
    workflow_dispatch:
        inputs:
            force_release:
                description: "Force release even if version unchanged"
                required: false
                default: false
                type: boolean
            custom_version:
                description: "Override version (leave empty to use Cargo.toml version)"
                required: false
                type: string

permissions:
    contents: write
    pages: write
    id-token: write

jobs:
    detect_version_change:
        runs-on: ubuntu-latest
        outputs:
            version_changed: ${{ steps.check_version.outputs.version_changed }}
            new_version: ${{ steps.check_version.outputs.new_version }}
            previous_version: ${{ steps.check_version.outputs.previous_version }}
            release_trigger: ${{ steps.check_version.outputs.release_trigger }}

        steps:
            - name: Initialize repository checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 2

            - name: Configure Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Detect version and release conditions
              id: check_version
              run: |
                  echo "EXECUTING: Version and release condition detection"
                  echo "EVENT_TYPE: ${{ github.event_name }}"

                  # Extract current version from Cargo.toml
                  CURRENT_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
                  echo "CURRENT_VERSION: $CURRENT_VERSION"

                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    echo "STATUS: Manual workflow dispatch detected"

                    # Check if custom version is provided
                    if [[ -n "${{ inputs.custom_version }}" ]]; then
                      RELEASE_VERSION="${{ inputs.custom_version }}"
                      # Remove 'v' prefix if present for consistency
                      RELEASE_VERSION=${RELEASE_VERSION#v}
                      echo "CUSTOM_VERSION: Using provided version $RELEASE_VERSION"
                    else
                      RELEASE_VERSION="$CURRENT_VERSION"
                      echo "DEFAULT_VERSION: Using Cargo.toml version $RELEASE_VERSION"
                    fi

                    # Check if force release is enabled
                    if [[ "${{ inputs.force_release }}" == "true" ]]; then
                      echo "STATUS: Force release enabled - proceeding with release"
                      echo "version_changed=true" >> $GITHUB_OUTPUT
                      echo "release_trigger=manual_force" >> $GITHUB_OUTPUT
                    else
                      echo "STATUS: Standard manual release - checking for existing tag"
                      # Check if this version already has a release
                      if git tag -l | grep -q "^v${RELEASE_VERSION}$"; then
                        echo "WARNING: Tag v${RELEASE_VERSION} already exists"
                        echo "version_changed=false" >> $GITHUB_OUTPUT
                        echo "release_trigger=manual_duplicate" >> $GITHUB_OUTPUT
                      else
                        echo "STATUS: Version available for release"
                        echo "version_changed=true" >> $GITHUB_OUTPUT
                        echo "release_trigger=manual_new" >> $GITHUB_OUTPUT
                      fi
                    fi

                    echo "new_version=v$RELEASE_VERSION" >> $GITHUB_OUTPUT
                    echo "previous_version=manual" >> $GITHUB_OUTPUT

                  elif [[ "${{ github.event_name }}" == "push" ]]; then
                    echo "STATUS: Push event detected - checking version changes"

                    # Extract previous version from previous commit
                    git checkout HEAD~1 -- Cargo.toml 2>/dev/null || {
                      echo "STATUS: No previous Cargo.toml found - treating as initial version"
                      echo "version_changed=true" >> $GITHUB_OUTPUT
                      echo "new_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
                      echo "previous_version=none" >> $GITHUB_OUTPUT
                      echo "release_trigger=initial_version" >> $GITHUB_OUTPUT
                      exit 0
                    }

                    PREVIOUS_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version' 2>/dev/null || echo "unknown")
                    echo "PREVIOUS_VERSION: $PREVIOUS_VERSION"

                    # Restore current Cargo.toml
                    git checkout HEAD -- Cargo.toml

                    # Compare versions
                    if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                      echo "STATUS: Version change detected: $PREVIOUS_VERSION -> $CURRENT_VERSION"
                      echo "version_changed=true" >> $GITHUB_OUTPUT
                      echo "new_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
                      echo "previous_version=v$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
                      echo "release_trigger=version_change" >> $GITHUB_OUTPUT
                    else
                      echo "STATUS: No version change detected"
                      echo "version_changed=false" >> $GITHUB_OUTPUT
                      echo "new_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
                      echo "previous_version=v$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
                      echo "release_trigger=no_change" >> $GITHUB_OUTPUT
                    fi
                  else
                    echo "STATUS: Unexpected event type"
                    echo "version_changed=false" >> $GITHUB_OUTPUT
                    echo "new_version=unknown" >> $GITHUB_OUTPUT
                    echo "previous_version=unknown" >> $GITHUB_OUTPUT
                    echo "release_trigger=unknown_event" >> $GITHUB_OUTPUT
                  fi

    validate_and_test:
        runs-on: ubuntu-latest
        needs: detect_version_change
        if: ${{ needs.detect_version_change.outputs.version_changed == 'true' }}

        steps:
            - name: Initialize repository checkout
              uses: actions/checkout@v4

            - name: Configure Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Initialize Rust dependency cache
              uses: Swatinem/rust-cache@v2

            - name: Execute comprehensive test suite
              run: |
                  echo "EXECUTING: Comprehensive test validation"
                  cargo test --verbose --all-features
                  echo "STATUS: All tests completed successfully"

            - name: Validate project compilation
              run: |
                  echo "EXECUTING: Release build validation"
                  cargo build --release --verbose
                  echo "STATUS: Release build completed successfully"

            - name: Execute cargo check validation
              run: |
                  echo "EXECUTING: Cargo check validation"
                  cargo check --all-targets --all-features
                  echo "STATUS: Cargo check validation completed"

    generate_documentation:
        runs-on: ubuntu-latest
        needs: [detect_version_change, validate_and_test]
        if: ${{ needs.detect_version_change.outputs.version_changed == 'true' }}

        # Add Pages permissions and environment
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}

        steps:
            - name: Initialize repository checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Configure Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Initialize Rust dependency cache
              uses: Swatinem/rust-cache@v2

            - name: Setup GitHub Pages
              id: pages
              uses: actions/configure-pages@v5

            - name: Generate cargo documentation
              run: |
                  echo "EXECUTING: Documentation generation process"
                  cargo clean --doc
                  cargo doc --no-deps --all-features --document-private-items
                  echo "STATUS: Documentation generation completed"

            - name: Add redirect to crate documentation
              run: |
                  echo "EXECUTING: Documentation preparation (with redirect)"

                  # Get the crate name (convert hyphens to underscores for directory name)
                  CRATE_NAME=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].name' | tr '-' '_')
                  echo "CRATE_NAME: $CRATE_NAME"

                  # Create simple redirect to crate documentation
                  echo '<meta http-equiv="refresh" content="0;url='$CRATE_NAME'/index.html">' > target/doc/index.html

                  echo "STATUS: Redirect created to $CRATE_NAME documentation"

            - name: Remove lock file
              run: rm -f target/doc/.lock

            - name: Upload Pages artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: target/doc

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

    create_release:
        runs-on: ubuntu-latest
        needs: [detect_version_change, validate_and_test, generate_documentation]
        if: ${{ needs.detect_version_change.outputs.version_changed == 'true' }}

        steps:
            - name: Initialize repository checkout
              uses: actions/checkout@v4

            - name: Configure Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Initialize Rust dependency cache
              uses: Swatinem/rust-cache@v2

            - name: Generate release artifacts
              run: |
                  echo "EXECUTING: Release artifact generation"
                  cargo build --release --verbose

                  # Create release directory
                  mkdir -p release-artifacts

                  # Copy release binaries
                  find target/release -maxdepth 1 -type f -executable -not -name "*.*" -exec cp {} release-artifacts/ \; || true

                  # Generate artifact metadata
                  cat > release-artifacts/build-info.json << EOF
                  {
                    "version": "${{ needs.detect_version_change.outputs.new_version }}",
                    "previous_version": "${{ needs.detect_version_change.outputs.previous_version }}",
                    "commit_hash": "${{ github.sha }}",
                    "build_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                    "rust_version": "$(rustc --version)",
                    "build_environment": "github-actions"
                  }
                  EOF

                  echo "STATUS: Release artifacts generated"

            - name: Create compressed release archive
              run: |
                  echo "EXECUTING: Release archive creation"
                  tar -czf release-${{ needs.detect_version_change.outputs.new_version }}.tar.gz -C release-artifacts .
                  echo "STATUS: Release archive created"

            - name: Generate release notes content
              id: release_notes
              run: |
                  echo "EXECUTING: Release notes generation"

                  # Determine trigger description
                  case "${{ needs.detect_version_change.outputs.release_trigger }}" in
                    "version_change")
                      TRIGGER_DESC="Automatic release triggered by Cargo.toml version change"
                      VERSION_INFO="Version updated from ${{ needs.detect_version_change.outputs.previous_version }} to ${{ needs.detect_version_change.outputs.new_version }}"
                      ;;
                    "manual_force")
                      TRIGGER_DESC="Manual release with force flag enabled"
                      VERSION_INFO="Release version: ${{ needs.detect_version_change.outputs.new_version }}"
                      ;;
                    "manual_new")
                      TRIGGER_DESC="Manual release for new version"
                      VERSION_INFO="Release version: ${{ needs.detect_version_change.outputs.new_version }}"
                      ;;
                    "initial_version")
                      TRIGGER_DESC="Initial release for repository"
                      VERSION_INFO="Initial version: ${{ needs.detect_version_change.outputs.new_version }}"
                      ;;
                    *)
                      TRIGGER_DESC="Release execution"
                      VERSION_INFO="Release version: ${{ needs.detect_version_change.outputs.new_version }}"
                      ;;
                  esac

                  # Generate enhanced release notes
                  cat > release_notes.md << EOF
                  # Release ${{ needs.detect_version_change.outputs.new_version }}

                  **Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
                  **Commit Reference:** \`${{ github.sha }}\`
                  **Trigger:** ${{ needs.detect_version_change.outputs.release_trigger }}

                  ## Release Information

                  $TRIGGER_DESC

                  $VERSION_INFO

                  **Commit Message:** ${{ github.event.head_commit.message || 'Manual workflow execution' }}

                  ## Build Information

                  - **Rust Version:** $(rustc --version)
                  - **Build Environment:** GitHub Actions
                  - **Test Status:** All tests passed
                  - **Documentation:** Updated and deployed to docs branch

                  ## Artifacts

                  This release includes compiled binaries and build metadata.

                  ## Documentation

                  Updated documentation is available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
                  EOF

                  echo "STATUS: Release notes generated"

            - name: Execute GitHub release creation
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const fs = require('fs');
                      const path = require('path');

                      console.log('EXECUTING: GitHub release creation process');

                      // Read release notes
                      const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

                      // Create the release
                      const release = await github.rest.repos.createRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag_name: '${{ needs.detect_version_change.outputs.new_version }}',
                        target_commitish: '${{ github.sha }}',
                        name: 'Release ${{ needs.detect_version_change.outputs.new_version }}',
                        body: releaseNotes,
                        draft: false,
                        prerelease: false
                      });

                      console.log('STATUS: GitHub release created successfully');
                      console.log('RELEASE_URL:', release.data.html_url);

                      // Upload release archive
                      const archivePath = 'release-${{ needs.detect_version_change.outputs.new_version }}.tar.gz';
                      if (fs.existsSync(archivePath)) {
                        const archiveData = fs.readFileSync(archivePath);

                        await github.rest.repos.uploadReleaseAsset({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: release.data.id,
                          name: path.basename(archivePath),
                          data: archiveData
                        });

                        console.log('STATUS: Release archive uploaded successfully');
                      }

            - name: Generate release completion notification
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const success = '${{ job.status }}' === 'success';
                      const status = success ? 'COMPLETED_SUCCESSFULLY' : 'EXECUTION_FAILED';
                      const statusIndicator = success ? 'PASS' : 'FAIL';
                      const trigger = '${{ needs.detect_version_change.outputs.release_trigger }}';

                      // Determine trigger description for comment
                      let triggerDescription;
                      switch(trigger) {
                        case 'version_change':
                          triggerDescription = 'Cargo.toml version change detection';
                          break;
                        case 'manual_force':
                          triggerDescription = 'Manual workflow dispatch (forced)';
                          break;
                        case 'manual_new':
                          triggerDescription = 'Manual workflow dispatch (new version)';
                          break;
                        case 'initial_version':
                          triggerDescription = 'Initial repository release';
                          break;
                        default:
                          triggerDescription = 'Automated release workflow';
                      }

                      // Generate commit comment with release status
                      await github.rest.repos.createCommitComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        commit_sha: '${{ github.sha }}',
                        body: `**Release Creation Status:** ${statusIndicator}\n\n` +
                              `**Release Version:** ${{ needs.detect_version_change.outputs.new_version }}\n` +
                              `**Previous Version:** ${{ needs.detect_version_change.outputs.previous_version }}\n` +
                              `**Trigger:** ${triggerDescription}\n` +
                              `**Trigger Type:** ${trigger}\n` +
                              `**Status:** ${status}\n` +
                              `**Documentation:** Deployed to docs branch\n` +
                              `**Workflow Reference:** [View Execution Log](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
                      });
